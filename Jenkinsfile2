pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker_cred')  
        DOCKER_HUB_REPO = "gopinand9988/capstone2"      
        SCANNER_HOME = tool 'sonar-scanner-cli'
        EKS_CLUSTER_NAME = 'marthala'
        AWS_REGION = 'us-west-2'
    }

    stages {
        stage('Clean Workspace') {
            steps { cleanWs() }
        }

        stage('Git Checkout') {
            steps { git branch: 'main', url: 'https://github.com/20bci7179/Book-My-Show.git' }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('bookmyshow-app') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=BMS \
                            -Dsonar.projectName=BMS \
                            -Dsonar.sources=. \
                            -Dsonar.language=js
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script { waitForQualityGate abortPipeline: true, credentialsId: 'SonarToken' }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                cd bookmyshow-app
                ls -la
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json
                    npm install
                else
                    echo "Error: package.json not found!"
                    exit 1
                fi
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_HUB_REPO}:latest -f bookmyshow-app/Dockerfile bookmyshow-app"
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                script {
                    sh "echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${DOCKER_HUB_REPO}:latest"
                }
            }
        }

        stage('Deploy to Kubernetes (EKS)') {
            steps {
                script {
                    sh '''
                    echo "Configuring kubectl for EKS cluster..."
                    aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

                    echo "Deploying app to EKS..."
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml

                    echo "Verifying deployment..."
                    kubectl get pods
                    kubectl get svc
                    '''
                }
            }
        }
    }

    post {
        always {
            emailext(
                attachLog: true,
                subject: "'${currentBuild.result}' - ${env.JOB_NAME}",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'mvgr2002@gmail.com'
            )
        }
    }
}
